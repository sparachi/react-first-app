{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monsterData","id","name","email","CardList","monsters","map","monster","key","children","SearchBox","placeholder","handleChange","type","onChange","App","handleSearch","e","setState","searchField","target","value","state","greeting","users","fetch","then","response","json","respJson","this","index","filteredUsers","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,oLCG9BC,G,wBAAO,SAACC,GACnB,OACI,yBAAKC,UAAU,kBACT,yBAAKC,IAAI,gBAAgBC,IAAG,+BAA0BH,EAAMI,YAAYC,GAA5C,4BAC5B,4BAAKL,EAAMI,YAAYE,MACvB,4BAAKN,EAAMI,YAAYG,UCJtBC,EAAW,SAACR,GACvB,OACE,yBAAKC,UAAU,aACVD,EAAMS,SAASC,KAAI,SAACC,GAAD,OAChB,yBAAKV,UAAU,kBACX,kBAAC,EAAD,CAAMW,IAAKD,EAAQN,GAAID,YAAaO,QAG5C,6BACA,6BACCX,EAAMa,WCRFC,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACtC,OACI,6BACE,2BAAOf,UAAU,SAASgB,KAAK,SAASF,YAAaA,EAAaG,SAAUF,OCiFrEG,E,kDAnFb,aAAe,IAAD,8BACZ,gBAiDFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAjDrC,EAAKC,MAAQ,CACXC,SAAU,6BACVC,MAAO,CACL,CACEvB,GAAI,EACJC,KAAM,cAER,CACED,GAAI,EACJC,KAAM,UAER,CACED,GAAI,EACJC,KAAM,UAGViB,YAAa,IAlBH,E,gEAsBO,IAAD,OAClBM,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC7EF,MAAK,SAAAG,GAAQ,OAAI,EAAKX,SAAS,CAACM,MAAOK,S,uCAIxCC,KAAKZ,SAAS,CACZK,SAAU,wB,iCAGHQ,GACTD,KAAKZ,SAAS,CACZM,MAAO,CACL,CACEvB,GAAI,EACJC,KAAM,sBAER,CACED,GAAI,EACJC,KAAM,UAER,CACED,GAAI,EACJC,KAAM,c,+BAQJ,IAAD,EACwB4B,KAAKR,MAA5BE,EADD,EACCA,MAAOL,EADR,EACQA,YACTa,EAAgBR,EAAMS,QAAO,SAAA1B,GAAO,OACxCA,EAAQL,KAAKgC,cAAcC,SAAShB,EAAYe,kBAElD,OACE,yBAAKrC,UAAU,OACb,wBAAIA,UAAU,SAAd,oBACA,kBAAC,EAAD,CAAWc,YAAY,kBAAkBC,aAAckB,KAAKd,eAC5D,kBAAC,EAAD,CAAUd,KAAK,OAAOG,SAAU2B,GAC9B,wD,GAhEQI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79f6c5ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = (props) => {\n  return (\n      <div className=\"card-container\">\n            <img alt=\"monster image\" src={`https://robohash.org/${props.monsterData.id}?set=set2&size=180x200`}></img>\n            <h1>{props.monsterData.name}</h1>\n            <h2>{props.monsterData.email}</h2>\n      </div>\n  );\n};\n","import React from \"react\";\nimport \"./card-list.styles.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n        {props.monsters.map((monster) => (\n            <div className=\"card-container\">\n                <Card key={monster.id} monsterData={monster} ></Card>\n            </div>\n        ))}\n        <br />\n        <br />\n        {props.children}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\n// Functional Component or Presentational component\n// No access to lifecycle methods, state\n// Can only use props, and returns html\nexport const SearchBox = ({placeholder, handleChange}) => {\n  return (\n      <div >\n        <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\n      </div>\n  );\n};\n","import React, {Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      greeting: 'Hello to everyone From Sai',\n      users: [\n        {\n          id: 1,\n          name: 'Saikarthik'\n        },\n        {\n          id: 2,\n          name: 'Pratul'\n        },\n        {\n          id: 3,\n          name: 'Pavan'\n        }\n      ],\n      searchField: ''\n    }\n    // this.handleSearch = this.handleSearch.bind(this);\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\n    .then(respJson => this.setState({users: respJson}));\n  }\n\n  changeGreeting() {\n    this.setState({\n      greeting: 'Greeting modified'\n    });\n  }\n  changeUser(index) {\n    this.setState({\n      users: [\n        {\n          id: 1,\n          name: 'Saikarthik Parachi'\n        },\n        {\n          id: 2,\n          name: 'Pratul'\n        },\n        {\n          id: 3,\n          name: 'Pavan'\n        }\n      ]\n    })\n  }\n  handleSearch = (e) => {\n    this.setState({searchField: e.target.value});\n  }\n  render() {\n    const { users, searchField } = this.state;\n    const filteredUsers = users.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Monsters Rolodex</h1>\n        <SearchBox placeholder=\"Search Monsters\" handleChange={this.handleSearch}/>\n        <CardList name=\"test\" monsters={filteredUsers}>\n          <h1>example of a child</h1>\n        </CardList>\n        {/* <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            {this.state.greeting}\n          </p>\n          <button onClick={() => this.changeGreeting()}>Change Greeting</button>\n          <button onClick={() => this.changeUser(1)}>Change First User</button>\n          <button onClick={() => this.changeUser(2)}>Change Second User</button>\n          <button onClick={() => this.changeUser(3)}>Change Third User</button>\n        </header>\n        <div>\n        { this.state.users.map(user => <h1 key={user.id}>{user.name}</h1>) }\n        </div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}